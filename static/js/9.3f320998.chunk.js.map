{"version":3,"sources":["services/GitHubService.js","services/GitLabService.js","components/Portfolio/Portfolio.js"],"names":["githubApiBaseUrl","username","axios","get","query_parameters","gitLabApiBaseUrl","projectId","Portfolio","dark_mode","useState","selectedTab","setSelectedTab","handleSelectTabChange","event","newValue","loading","setLoading","error","setError","gitHubRepositories","setGitHubRepositories","useStateWithCallback","maxProjects","gitLabProjects","length","i","GitLabService","getProjectLanguages","id","then","response","language","Object","keys","data","catch","console","log","fetchGitLabLanguages","setGitLabProjects","useEffect","gitHubRequest","GitHubService","getUserRepositories","gitHubDetails","gitLabRequest","getUserProjects","gitLabDetails","all","spread","responses","gitHubResponse","gitLabResponse","errors","gitHubCards","slice","map","repository","undefined","Col","className","sm","align","src","href","html_url","name","description","limit","button","gitLabCards","project","web_url","gitHubTab","Container","Row","profileLink","rel","target","gitLabTab","AppBar","position","color","Tabs","value","onChange","variant","aria-label","Tab","label","icon","animation","index","onChangeIndex"],"mappings":"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","file":"static/js/9.3f320998.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// const clientId = \"\";\r\n// const clientSecret = \"\";\r\n// const oauth = \"clientId=\"+{clientId}+\"&clientSecret\"+{clientSecret};\r\nconst githubApiBaseUrl = \"https://api.github.com/\";\r\n\r\nclass GitHubService {\r\n    getUserData(username) {\r\n        return axios.get(githubApiBaseUrl + \"users/\" + username);\r\n    }\r\n\r\n    getUserRepositories(username, query_parameters) {\r\n        return axios.get(githubApiBaseUrl + \"users/\" + username + \"/repos?\" + query_parameters);\r\n    }\r\n}\r\n\r\nexport default new GitHubService();","import axios from \"axios\";\r\n\r\nconst gitLabApiBaseUrl = \"https://gitlab.com/api/v4/\";\r\n\r\nclass GitLabService {\r\n    getUserData(username) {\r\n        return axios.get(gitLabApiBaseUrl + \"users?username=\" + username);\r\n    }\r\n\r\n    getUserProjects(username) {\r\n        return axios.get(gitLabApiBaseUrl + \"users/\" + username + \"/projects\");\r\n    }\r\n\r\n    getProjectLanguages(projectId) {\r\n        return axios.get(gitLabApiBaseUrl + \"projects/\" + projectId + \"/languages\");\r\n    }\r\n}\r\n\r\nexport default new GitLabService();","import React, { useState, useEffect } from \"react\";\r\nimport \"./Portfolio.css\";\r\nimport { Row, Col, Container } from \"react-bootstrap\";\r\nimport GitHubService from \"../../services/GitHubService.js\";\r\nimport GitLabService from \"../../services/GitLabService.js\";\r\nimport { SpinnerUtility, ErrorHandler, CardUtility } from \"../Utilities/Utilities.js\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Tab, Tabs, AppBar } from \"@material-ui/core\";\r\nimport { SiGithub, SiGitlab, SiBitbucket } from \"react-icons/si\";\r\nimport useStateWithCallback from \"use-state-with-callback\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport axios from \"axios\";\r\nimport { gitHubDetails, gitLabDetails } from \"../../config.js\";\r\nfunction Portfolio({ dark_mode }) {\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n\r\n    const handleSelectTabChange = (event, newValue) => {\r\n        setSelectedTab(newValue);\r\n    };\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [gitHubRepositories, setGitHubRepositories] = useState([]);\r\n    const [gitLabProjects, setGitLabProjects] = useStateWithCallback([], () => {\r\n        fetchGitLabLanguages();\r\n    });\r\n    const limit = 60;\r\n    const numberOfProjects = 6;\r\n\r\n    // for each project fetch the languages that its using and push the most used one\r\n    function fetchGitLabLanguages() {\r\n        const maxProjects = gitLabProjects.length > 6 ? 6 : gitLabProjects.length;\r\n        for (let i = 0; i < maxProjects; i++) {\r\n            GitLabService.getProjectLanguages(gitLabProjects[i].id)\r\n                .then((response) => {\r\n                    gitLabProjects[i].language = Object.keys(response.data)[0];\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    // fetch user's GitHub repositories and GitLab projects\r\n    useEffect(() => {\r\n        //     if(selectedTab === 0 && gitHubRepositories.length === 0) {\r\n        //         setLoading(true);\r\n        //         GitHubService.getUserRepositories(username, \"per_page=7&sort=updated:asc\")\r\n        //         .then(response => { setGitHubRepositories(response.data); setLoading(false); })\r\n        //         .catch(error => { setError(error); } );\r\n        //     }\r\n        //     else if(selectedTab === 1 && gitLabProjects.length === 0) {\r\n        //         setLoading(true);\r\n        //         GitLabService.getUserProjects(username)\r\n        //         .then(response => { setGitLabProjects(response.data); setLoading(false); })\r\n        //         .catch(error => { setError(error); } );\r\n        //     }\r\n        if (gitHubRepositories.length === 0 || gitLabProjects.length === 0) {\r\n            let gitHubRequest = GitHubService.getUserRepositories(\r\n                gitHubDetails.username,\r\n                \"per_page=7&sort=updated:asc\"\r\n            );\r\n            let gitLabRequest = GitLabService.getUserProjects(gitLabDetails.username);\r\n\r\n            axios\r\n                .all([gitHubRequest, gitLabRequest])\r\n                .then(\r\n                    axios.spread((...responses) => {\r\n                        const gitHubResponse = responses[0].data;\r\n                        const gitLabResponse = responses[1].data;\r\n                        setGitHubRepositories(gitHubResponse);\r\n                        setGitLabProjects(gitLabResponse);\r\n                        setLoading(false);\r\n                    })\r\n                )\r\n                .catch((errors) => {\r\n                    setError(errors);\r\n                });\r\n        }\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // create a card for each public GitHub repository\r\n    const gitHubCards = gitHubRepositories.slice(0, numberOfProjects).map((repository) => {\r\n        let language = repository.language;\r\n        if (language === \"Jupyter Notebook\") language = \"Python\";\r\n        else if (language === null || language === undefined) language = \"BlackWallpaper\";\r\n\r\n        return (\r\n            <Col className=\"py-2\" key={repository.name} sm=\"4\" align=\"center\">\r\n                <CardUtility\r\n                    src={\"/images/languages/\" + language + \".jpg\"}\r\n                    href={repository.html_url}\r\n                    name={repository.name}\r\n                    description={repository.description}\r\n                    limit={limit}\r\n                    button=\"View on GitHub\"\r\n                />\r\n            </Col>\r\n        );\r\n    });\r\n\r\n    // create a card for each public GitLab project\r\n    const gitLabCards = gitLabProjects.slice(0, numberOfProjects).map((project) => {\r\n        let language = project.language;\r\n        if (language === \"Jupyter Notebook\") language = \"Python\";\r\n        else if (language === null || language === undefined) language = \"BlackWallpaper\";\r\n\r\n        return (\r\n            <Col className=\"py-2\" key={project.name} sm=\"4\" align=\"center\">\r\n                <CardUtility\r\n                    src={\"/images/languages/\" + language + \".jpg\"}\r\n                    href={project.web_url}\r\n                    name={project.name}\r\n                    description={project.description}\r\n                    limit={limit}\r\n                    button=\"View on GitLab\"\r\n                />\r\n            </Col>\r\n        );\r\n    });\r\n\r\n    // GitHub tab\r\n    const gitHubTab = (\r\n        <Container>\r\n            <Row> {gitHubCards} </Row>\r\n            {gitHubRepositories.length > 6 && (\r\n                <div className=\"more_projects\">\r\n                    <a\r\n                        href={gitHubDetails.profileLink}\r\n                        rel=\"noopener noreferrer\"\r\n                        target=\"_blank\"\r\n                        align=\"center\"\r\n                    >\r\n                        More Projects\r\n                    </a>\r\n                </div>\r\n            )}\r\n            <br />\r\n        </Container>\r\n    );\r\n\r\n    // GitLab tab\r\n    const gitLabTab = (\r\n        <Container>\r\n            <Row> {gitLabCards} </Row>\r\n            {gitLabProjects.length > 6 && (\r\n                <div className=\"more_projects\">\r\n                    <a\r\n                        href=\"https://gitlab.com/alexiszamanidis\"\r\n                        rel=\"noopener noreferrer\"\r\n                        target=\"_blank\"\r\n                        align=\"center\"\r\n                    >\r\n                        More Projects\r\n                    </a>\r\n                </div>\r\n            )}\r\n            <br />\r\n        </Container>\r\n    );\r\n\r\n    return (\r\n        <div id=\"Portfolio\" className={dark_mode ? \"dark_mode_portfolio\" : \"light_mode_portfolio\"}>\r\n            <AppBar position=\"static\" color=\"default\">\r\n                <Tabs\r\n                    value={selectedTab}\r\n                    onChange={handleSelectTabChange}\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label=\"GitHub\" icon={<SiGithub />} />\r\n                    <Tab label=\"GitLab\" icon={<SiGitlab />} />\r\n                    <Tab label=\"BitBucket\" icon={<SiBitbucket />} />\r\n                </Tabs>\r\n            </AppBar>\r\n            {error !== null ? (\r\n                <ErrorHandler error={error} />\r\n            ) : loading !== false ? (\r\n                <SpinnerUtility align=\"center\" animation=\"border\" />\r\n            ) : (\r\n                <SwipeableViews index={selectedTab} onChangeIndex={handleSelectTabChange}>\r\n                    {selectedTab === 0 && gitHubTab !== null ? gitHubTab : <div></div>}\r\n                    {selectedTab === 1 && gitLabTab !== null ? gitLabTab : <div></div>}\r\n                </SwipeableViews>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nPortfolio.propTypes = {\r\n    dark_mode: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Portfolio;\r\n"],"sourceRoot":""}